// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function(self) {
  var BlobPart, FormData, LF, StringPart, support;
  if (self.FormData) {
    return;
  }
  support = {
    arrayBuffer: __indexOf.call(self, 'ArrayBuff') >= 0,
    blob: __indexOf.call(self, 'FileReader') >= 0 && __indexOf.call(self, 'Blob') >= 0 && (function() {
      try {
        new Blob();
        return true;
      } catch (_error) {
        return false;
      }
    })()
  };
  LF = "\r\n";
  StringPart = (function() {
    function StringPart(name, value) {
      this.name = name;
      this.value = value;
    }

    StringPart.prototype.convertToString = function() {
      var s;
      s = [];
      s.push("Content-Disposition: form-data; name=" + this.name + ";" + LF + LF);
      s.push("" + this.value + LF);
      return s.join('');
    };

    return StringPart;

  })();
  BlobPart = (function() {
    function BlobPart(name, filename, souce) {
      this.name = name;
      this.filename = filename;
      this.souce = souce;
    }

    BlobPart.prototype._readArrayBufferAsString = function(buff) {
      var view;
      view = new Uint8Array(buf);
      return view.reduce(function(acc, b) {
        acc.push(String.fromCharCode(b));
        return acc;
      }, new Array(view.length)).join('');
    };

    BlobPart.prototype._readBlobAsArrayBuffer = function() {
      var reader;
      reader = new FileReader();
      reader.readAsArrayBuffer(this.souce);
      return reader.onload = function() {
        return this._readArrayBufferAsString(reader.result);
      };
    };

    BlobPart.prototype._readBlobAsBinary = function() {
      return this.souce.getAsBinary();
    };

    BlobPart.prototype.convertToString = function() {
      var s;
      s = [];
      s.push("Content-Disposition: form-data; name=" + this.name + "; filename=" + this.filename + LF);
      s.push("Content-Type: " + this.souce.type + LF + LF);
      if (support.blob && support.arrayBuffer) {
        s.push(this._readBlobAsArrayBuffer() + LF);
      } else {
        s.push(this._readBlobAsBinary() + LF);
      }
      return s.join('');
    };

    return BlobPart;

  })();
  FormData = (function() {
    function FormData() {
      this.polyfill = true;
      this._parts = [];
      this.boundary = "--------FormData" + Math.random();
    }

    FormData.prototype.append = function(key, value) {
      var part;
      part = null;
      if (typeof value === "string") {
        part = new StringPart(key, value);
      } else if (value instanceof Blob) {
        part = new BlobPart(key, value.name, value);
      } else {
        part = new StringPart(key, value);
      }
      if (part) {
        this._parts.push(part);
      }
      return this;
    };

    FormData.prototype.toString = function() {
      var boundary;
      boundary = this.boundary;
      return this._parts.reduce(function(acc, part) {
        acc.push("--" + boundary + "\r\n");
        if (part instanceof StringPart) {
          acc.push(part.convertToString());
        }
        if (part instanceof BlobPart) {
          acc.push(part.convertToString());
        }
        acc.push("--" + boundary + "--");
        return acc;
      }, []).join('');
    };

    return FormData;

  })();
  return self.FormData = FormData;
})(typeof self !== 'undefined' ? self : this);
