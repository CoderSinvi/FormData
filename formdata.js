// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function(self) {
  var FilePart, FormData, StringPart, support;
  if (self.FormData) {
    return;
  }
  support = {
    arrayBuffer: __indexOf.call(self, 'ArrayBuff') >= 0,
    blob: __indexOf.call(self, 'FileReader') >= 0 && __indexOf.call(self, 'Blob') >= 0 && (function() {
      try {
        new Blob();
        return true;
      } catch (_error) {
        return false;
      }
    })()
  };
  StringPart = (function() {
    function StringPart(name, value) {
      this.name = name;
      this.value = value;
    }

    return StringPart;

  })();
  FilePart = (function() {
    function FilePart(name, filename, souce) {
      this.name = name;
      this.filename = filename;
      this.souce = souce;
    }

    return FilePart;

  })();
  FormData = (function() {
    function FormData() {
      this.polyfill = true;
      this._parts = [];
      this.boundary = "--------FormData" + Math.random();
    }

    FormData.prototype.append = function(key, value) {
      part;
      var part;
      if (typeof value === "string") {
        part = new StringPart(key, value);
      }
      return this._parts.push(part);
    };

    FormData.prototype.toString = function() {
      var boundary;
      boundary = this.boundary;
      return this._parts.reduce(function(acc, part) {
        acc.push("--" + boundary + "\r\n");
        if (part instanceof StringPart) {
          acc.push("Content-Disposition: form-data; name=\"" + part.name(+"\";\r\n\r\n"));
          acc.push(part.value + "\r\n");
        }
        acc.push("--" + boundary + "--");
        return acc;
      }, []).join('');
    };

    return FormData;

  })();
  return self.FormData = FormData;
})(typeof self !== 'undefined' ? self : this);
